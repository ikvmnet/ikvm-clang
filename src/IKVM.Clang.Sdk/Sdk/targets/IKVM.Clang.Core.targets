<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <OutputType Condition=" '$(OutputType)' == '' ">Library</OutputType>
        <TargetTriple Condition=" '$(TargetTriple)' == '' ">$(TargetIdentifier)</TargetTriple>
        <UseLld Condition=" '$(UseLld)' == '' ">true</UseLld>
        <DebugSymbols Condition=" '$(DebugSymbols)' == '' And '$(Configuration)' == 'Debug' ">true</DebugSymbols>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'exe' ">
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' "></TargetPrefix>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'exe' And $(TargetTriple.Contains('-windows-'))">.exe</TargetExt>
        <Subsystem Condition=" '$(Subsystem)' == '' And $(TargetTriple.Contains('-windows-')) ">console</Subsystem>
        <CopyProjectReferenceOutputToOutput Condition=" '$(CopyProjectReferenceOutputToOutput)' == '' ">true</CopyProjectReferenceOutputToOutput>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'library' ">
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' "></TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And $(TargetTriple.Contains('-linux-')) ">lib</TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And $(TargetTriple.Contains('-apple-')) ">lib</TargetPrefix>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.dll</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriple.Contains('-linux-')) ">.so</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriple.Contains('-apple-')) ">.dylib</TargetExt>
        <CopyProjectReferenceOutputToOutput Condition=" '$(CopyProjectReferenceOutputToOutput)' == '' ">false</CopyProjectReferenceOutputToOutput>
    </PropertyGroup>

    <PropertyGroup>
        <ObjectExt Condition=" '$(ObjectExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.obj</ObjectExt>
        <ObjectExt Condition=" '$(ObjectExt)' == '' ">.o</ObjectExt>
    </PropertyGroup>

    <PropertyGroup>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.lib</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' ">.a</LibraryExt>
    </PropertyGroup>

    <PropertyGroup>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-linux-')) ">.g</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-apple-')) ">.dsym</DebugSymbolsExt>
    </PropertyGroup>

    <PropertyGroup>
        <TargetName Condition=" '$(TargetName)' == '' ">$(ProjectName)</TargetName>
        <TargetFileName Condition=" '$(TargetFileName)' == '' ">$(TargetPrefix)$(TargetName)$(TargetExt)</TargetFileName>
        <LibraryFileName Condition=" '$(LibraryFileName)' == '' And '$(LibraryExt)' != '' ">$(TargetPrefix)$(TargetName)$(LibraryExt)</LibraryFileName>
        <DebugSymbolsFileName Condition=" '$(DebugSymbolsFileName)' == '' And '$(DebugSymbolsExt)' != '' ">$(TargetPrefix)$(TargetName)$(DebugSymbolsExt)</DebugSymbolsFileName>

        <!-- output libraries and binaries to different directories -->
        <LibraryPathName Condition=" '$(LibraryPathName)' == '' ">lib\</LibraryPathName>
        <BinaryPathName Condition=" '$(BinaryPathName)' == '' ">bin\</BinaryPathName>
        <IncludePathName Condition=" '$(IncludePathName)' == '' ">include\</IncludePathName>
        <TargetPathName Condition=" '$(OutputType)' == 'library' ">$(LibraryPathName)</TargetPathName>
        <TargetPathName Condition=" '$(OutputType)' == 'exe' ">$(BinaryPathName)</TargetPathName>
    </PropertyGroup>

    <!--
    
    AssignProjectConfiguration
    
    Assigns the appropriate configuration to each project in the list of project references passed in.
    Adds to the project references passed in any project references implied by dependencies expressed in the solution file, if any.
    
    -->

    <Target Name="AssignProjectConfiguration" Condition="'$(CurrentSolutionConfigurationContents)' != '' Or '@(ProjectReference)'!=''">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
            <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</AddSyntheticProjectReferencesForSolutionDependencies>
        </PropertyGroup>

        <AssignProjectConfiguration ProjectReferences="@(ProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="$(AddSyntheticProjectReferencesForSolutionDependencies)" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>

        <ItemGroup>
            <ProjectReferenceWithConfiguration>
                <Targets Condition="'%(ProjectReferenceWithConfiguration.Targets)' == ''">Build</Targets>
                <BuildReference Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
                <ReferenceTargetItems Condition="'%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == ''">true</ReferenceTargetItems>
                <CopyTargetItemsLocal Condition="'%(ProjectReferenceWithConfiguration.CopyTargetItemsLocal)' == ''">true</CopyTargetItemsLocal>
                <ReferenceIncludeDirectories Condition="'%(ProjectReferenceWithConfiguration.ReferenceIncludeDirectories)' == ''">true</ReferenceIncludeDirectories>
                <ReferenceLibraryDirectories Condition="'%(ProjectReferenceWithConfiguration.ReferenceLibraryDirectories)' == ''">true</ReferenceLibraryDirectories>
                <ReferenceDependencies Condition="'%(ProjectReferenceWithConfiguration.ReferenceDependencies)' == ''">true</ReferenceDependencies>
            </ProjectReferenceWithConfiguration>
        </ItemGroup>
    </Target>

    <!--
    
    ResolveProjectReferences
    
    Ensure any project references are properly built.
    
    -->

    <ItemDefinitionGroup>
        <ProjectReference>
            <ReferenceSourceTarget>ProjectReference</ReferenceSourceTarget>
        </ProjectReference>
    </ItemDefinitionGroup>

    <PropertyGroup>
        <ResolveProjectReferencesDependsOn>
            $(ResolveProjectReferencesDependsOn);
            AssignProjectConfiguration;
        </ResolveProjectReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveProjectReferences" DependsOnTargets="$(ResolveProjectReferencesDependsOn)" Returns="@(_ResolvedNativeItemProjectReferences)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="%(ProjectReferenceWithConfiguration.Targets)"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition=" '%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
        </MSBuild>
    </Target>

    <Target Name="ResolveProjectReferencesDesignTime">

    </Target>

    <!--
    
    GetClangTargetItem
    
    Externally callable target that returns information about the native target being built.
    
    -->

    <Target Name="GetClangTargetItem" Returns="@(GetClangTargetItem)">
        <ItemGroup>
            <GetClangTargetItem Include="$([System.IO.Path]::GetFullPath('$(OutputPath)$(TargetPathName)$(TargetFileName)'))">
                <TargetIdentifier>$(TargetIdentifier)</TargetIdentifier>
                <TargetName>$(TargetName)</TargetName>
                <TargetTriple>$(TargetTriple)</TargetTriple>
                <LibraryPath>$([System.IO.Path]::GetFullPath('$(OutputPath)$(LibraryPathName)$(LibraryFileName)'))</LibraryPath>
                <DebugSymbolsPath>$([System.IO.Path]::GetFullPath('$(OutputPath)$(TargetPathName)$(DebugSymbolsFileName)'))</DebugSymbolsPath>
                <IncludePath>$([System.IO.Path]::GetFullPath('$(OutputPath)$(IncludePathName)'))</IncludePath>
                <Version>$(Version)</Version>
                <CopyUpToDateMarker>@(CopyUpToDateMarker)</CopyUpToDateMarker>
            </GetClangTargetItem>
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveClangTargetItems
    
    Externally callable target that returns information about the native target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetTransitiveClangTargetItems" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveClangTargetItems)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetClangTargetItem;GetTransitiveClangTargetItems"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' And '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="false">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveTargetItems" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == 'true' "/>
        </MSBuild>
        <RemoveDuplicates Inputs="@(_GetTransitiveTargetItems)">
            <Output TaskParameter="Filtered" ItemName="__GetTransitiveTargetItems"/>
        </RemoveDuplicates>
        <ItemGroup>
            <GetTransitiveTargetItems Include="@(__GetTransitiveTargetItems)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetClangIncludeDirectories
    
    Externally callable target that returns the include directory information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetClangIncludeDirectories" Returns="@(GetClangIncludeDirectories)">
        <ItemGroup>
            <GetClangIncludeDirectories Include="$(IncludeDirectories)" />
            <GetClangIncludeDirectories Include="@(IncludeDirectories)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveClangIncludeDirectories" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveClangIncludeDirectories)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetClangIncludeDirectories;GetTransitiveClangIncludeDirectories"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' And '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveIncludeDirectories" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceIncludeDirectories)' == 'true' "/>
        </MSBuild>
        <RemoveDuplicates Inputs="@(_GetTransitiveIncludeDirectories)">
            <Output TaskParameter="Filtered" ItemName="__GetTransitiveIncludeDirectories"/>
        </RemoveDuplicates>
        <ItemGroup>
            <GetTransitiveIncludeDirectories Include="@(__GetTransitiveIncludeDirectories)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveClangLibraryDirectories
    
    Externally callable target that returns the library directory information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetClangLibraryDirectories" Returns="@(GetClangLibraryDirectories)">
        <ItemGroup>
            <GetClangLibraryDirectories Include="$(LibraryDirectories)" />
            <GetClangLibraryDirectories Include="@(LibraryDirectories)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveClangLibraryDirectories" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveClangLibraryDirectories)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetClangLibraryDirectories;GetTransitiveClangLibraryDirectories"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' And '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveLibraryDirectories" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceLibraryDirectories)' == 'true' "/>
        </MSBuild>
        <RemoveDuplicates Inputs="@(_GetTransitiveLibraryDirectories)">
            <Output TaskParameter="Filtered" ItemName="__GetTransitiveLibraryDirectories"/>
        </RemoveDuplicates>
        <ItemGroup>
            <GetTransitiveLibraryDirectories Include="@(__GetTransitiveLibraryDirectories)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveClangDependencies
    
    Externally callable target that returns the dependency information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetClangDependencies" Returns="@(GetClangDependencies)">
        <ItemGroup>
            <GetClangDependencies Include="$(Dependencies)" />
            <GetClangDependencies Include="@(Dependencies)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveClangDependencies" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveClangDependencies)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetClangDependencies;GetTransitiveClangDependencies"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' And '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="false">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveDependencies" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceDependencies)' == 'true' "/>
        </MSBuild>
        <RemoveDuplicates Inputs="@(_GetTransitiveDependencies)">
            <Output TaskParameter="Filtered" ItemName="__GetTransitiveDependencies"/>
        </RemoveDuplicates>
        <ItemGroup>
            <GetTransitiveDependencies Include="@(__GetTransitiveDependencies)" />
        </ItemGroup>
    </Target>

    <!--
    
    ImportTransitiveProjectReferenceItems
    
    Collect any items resolved from ProjectReferences and configure locally.
    
    -->
    <PropertyGroup>
        <ImportTransitiveProjectReferenceItemsDependsOn>
            $(ImportTransitiveProjectReferenceItemsDependsOn);
            AssignProjectConfiguration;
            GetTransitiveClangTargetItems;
            GetTransitiveClangIncludeDirectories;
            GetTransitiveClangLibraryDirectories;
            GetTransitiveClangDependencies;
        </ImportTransitiveProjectReferenceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ImportTransitiveProjectReferenceItems" DependsOnTargets="$(ImportTransitiveProjectReferenceItemsDependsOn)">
        <ItemGroup>
            <ImportedIncludeDirectories Include="@(GetTransitiveTargetItems->'%(IncludePath)')" />
            <ImportedIncludeDirectories Include="@(GetTransitiveIncludeDirectories)" />
        </ItemGroup>
        <ItemGroup>
            <_GetTransitiveTargetItems Include="@(GetTransitiveTargetItems->'%(LibraryPath)')" />
            <ImportedLibraryDirectories Include="@(_GetTransitiveTargetItems->'%(RootDir)%(Directory)')" />
            <ImportedLibraryDirectories Include="@(GetTransitiveLibraryDirectories)" />
            <ImportedDependencies Include="@(GetTransitiveTargetItems->'%(TargetName)')" />
            <ImportedDependencies Include="@(GetTransitiveDependencies)" />
        </ItemGroup>
    </Target>

    <UsingTask TaskName="IkvmClangSdkGenerateUniqueFileName" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <MetadataName ParameterType="System.String" Required="true" />
            <Extension ParameterType="System.String" Required="true" />
            <Directory ParameterType="System.String" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
                var hs = new HashSet<string>();
                
                foreach (var item in Items)
                {
                    var i = 0;
                    var n = item.GetMetadata("FileName") ?? Path.ChangeExtension(Path.GetRandomFileName(), "");
                    var s = n;
                    while (hs.Add(s) == false)
                        s = n + "_" + (++i);
                    
                    item.SetMetadata(MetadataName, Path.Combine(Directory ?? "", s + Extension ?? item.GetMetadata("Extension")));
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    
    PrepareCompile
    
    Generates the ObjectPath metadata for each input Compile item by selecting a unique identifying name.
    
    -->

    <Target Name="PrepareCompile" DependsOnTargets="ImportTransitiveProjectReferenceItems" Condition=" '@(Compile)' != '' ">
        <IkvmClangSdkGenerateUniqueFileName Items="@(Compile)" MetadataName="ObjectPath" Extension="$(ObjectExt)" Directory="$(IntermediateOutputPath)">
            <Output TaskParameter="Items" ItemName="_Compile" />
        </IkvmClangSdkGenerateUniqueFileName>

        <ItemGroup>
            <Compile Remove="@(Compile)" />
            <Compile Include="@(_Compile)" />
        </ItemGroup>
    </Target>

    <!--
    
    CoreCompile
    
    Invokes the Clang compiler for each Compile item to generate the output object file.
    
    -->

    <PropertyGroup>
        <CoreCompileDependsOn>
            $(CoreCompileDependsOn);
            ResolveProjectReferences;
            ImportTransitiveProjectReferenceItems;
            PrepareCompile;
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="CoreCompile" DependsOnTargets="$(CoreCompileDependsOn)" Inputs="@(Compile)" Outputs="%(ObjectPath)">
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryname('%(Compile.ObjectPath)'))" />

        <PropertyGroup>
            <_SourcePath>%(Compile.Identity)</_SourcePath>
            <_ObjectPath>%(Compile.ObjectPath)</_ObjectPath>
            <_DebugSymbols>%(Compile.DebugSymbols)</_DebugSymbols>
            <_DebugSymbols Condition=" '$(_DebugSymbols)' == '' ">$(DebugSymbols)</_DebugSymbols>
            <_Language>%(Compile.Language)</_Language>
            <_Language Condition=" '$(_Language)' == '' ">$(Language)</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.c' ">C</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.cpp' ">C++</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.m' ">objective-c</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.mm' ">objective-c++</_Language>
            <_LanguageStandard>%(Compile.LanguageStandard)</_LanguageStandard>
            <_LanguageStandard Condition=" '$(_LanguageStandard)' == '' ">$(LanguageStandard)</_LanguageStandard>
            <_PositionIndependentCode>%(Compile.PositionIndependentCode)</_PositionIndependentCode>
            <_PositionIndependentCode Condition=" '$(_PositionIndependentCode)' == '' ">$(PositionIndependentCode)</_PositionIndependentCode>
            <_MsCompatibility>%(Compile.MsCompatibility)</_MsCompatibility>
            <_MsCompatibility Condition=" '$(_MsCompatibility)' == '' ">$(MsCompatibility)</_MsCompatibility>
            <_MsCompatibilityVersion>%(Compile.MsCompatibilityVersion)</_MsCompatibilityVersion>
            <_MsCompatibilityVersion Condition=" '$(_MsCompatibilityVersion)' == '' ">$(MsCompatibilityVersion)</_MsCompatibilityVersion>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-c" />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetTriple)" />
            <_Args Include="-g" Condition=" '$(_DebugSymbols)' == 'true' " />

            <_Args Include="-std=$(_LanguageStandard)" Condition=" '$(_LanguageStandard)' != '' " />
            <_Args Include="-fPIC" Condition=" '$(_PositionIndependentCode)' == 'true' " />
            <_Args Include="-fms-compatibility" Condition=" '$(_MsCompatibility)' == 'true' " />
            <_Args Include="-fms-compatibility-version=$(_MsCompatibilityVersion)" Condition=" '$(_MsCompatibilityVersion)' != '' " />

            <_Args Include="-x;c" Condition=" '$(_Language)' == 'C' " />
            <_Args Include="-x;c++" Condition=" '$(_Language)' == 'C++' " />

            <_SystemRootDirectories Remove="@(_SystemRootDirectories)" />
            <_SystemRootDirectories Include="%(Compile.SystemRootDirectories)" />
            <_SystemRootDirectories Include="@(SystemRootDirectories)" />
            <_SystemRootDirectories Include="$(SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;')" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Remove="@(_IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="%(Compile.IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="@(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="$(IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_SystemIncludeDirectories Remove="@(_SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="%(Compile.SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="@(SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="$(SystemIncludeDirectories)" />
            <_Args Include="@(_SystemIncludeDirectories->'-isystem &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_SystemIncludeDirectories)' != '' " />

            <_IncludeDirectories Remove="@(_IncludeDirectories)" />
            <_IncludeDirectories Include="%(Compile.IncludeDirectories)" />
            <_IncludeDirectories Include="@(IncludeDirectories)" />
            <_IncludeDirectories Include="$(IncludeDirectories)" />
            <_IncludeDirectories Include="@(ImportedIncludeDirectories)" />
            <_Args Include="@(_IncludeDirectories->'-I &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_IncludeDirectories)' != '' " />

            <_PreprocessorDefinitions Remove="@(_PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="%(Compile.PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="@(PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="$(PreprocessorDefinitions)" />
            <_Args Include="@(_PreprocessorDefinitions->'-D &quot;%(Identity)&quot;')" Condition=" '@(_PreprocessorDefinitions)' != '' " />

            <_AdditionalOptions Remove="@(_AdditionalOptions)" />
            <_AdditionalOptions Include="%(Compile.AdditionalCompileOptions)" />
            <_AdditionalOptions Include="@(AdditionalCompileOptions)" />
            <_AdditionalOptions Include="$(AdditionalCompileOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="&quot;$(_SourcePath)&quot;" />

            <_Args Include="-o;&quot;$(_ObjectPath)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
        
        <ItemGroup>
            <FileWrites Include="$(_ObjectPath)" />
        </ItemGroup>
    </Target>

    <!--
    
    CoreLink
    
    Invokes the Clang compiler for the set of all object files to produce the final taraget, library and debug symbols.
    
    -->

    <PropertyGroup>
        <CoreLinkDependsOn>
            $(CoreLinkDependsOn);
            Compile;
            ImportTransitiveProjectReferenceItems;
        </CoreLinkDependsOn>
    </PropertyGroup>

    <Target Name="CoreLink" DependsOnTargets="$(CoreLinkDependsOn)" Inputs="@(Compile->'%(ObjectPath)')" Outputs="$(IntermediateOutputPath)$(TargetFileName)">
        <MakeDir Directories="$(IntermediateOutputPath)" />

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-shared" Condition=" '$(OutputType)' == 'library' " />
            <_Args Include="-static" Condition=" '$(OutputType)' == 'staticlibrary' " />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetTriple)" />
            <_Args Include="-fuse-ld=lld" Condition=" '$(UseLld)' == 'true' " />
            <_Args Include="-g" Condition=" '$(DebugSymbols)' == 'true' " />

            <_Args Include="-Xlinker /subsystem:$(Subsystem)" Condition=" '$(Subsystem)' != '' " />

            <_SystemRootDirectories Remove="@(_SystemRootDirectories)" />
            <_SystemRootDirectories Include="@(SystemRootDirectories)" />
            <_SystemRootDirectories Include="$(SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Remove="@(_IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="@(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="$(IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_LibraryDirectories Remove="@(_LibraryDirectories)" />
            <_LibraryDirectories Include="@(LibraryDirectories)" />
            <_LibraryDirectories Include="$(LibraryDirectories)" />
            <_LibraryDirectories Include="@(ImportedLibraryDirectories)" />
            <_Args Include="@(_LibraryDirectories->'-L &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_LibraryDirectories)' != '' " />

            <_Dependencies Remove="@(_Dependencies)" />
            <_Dependencies Include="@(Dependencies)" />
            <_Dependencies Include="$(Dependencies)" />
            <_Dependencies Include="@(ImportedDependencies)" />
            <_Args Include="@(_Dependencies->'-l &quot;%(Identity)&quot;')" Condition=" '@(_Dependencies)' != '' " />

            <_AdditionalOptions Remove="@(_AdditionalOptions)" />
            <_AdditionalOptions Include="@(AdditionalLinkOptions)" />
            <_AdditionalOptions Include="$(AdditionalLinkOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="@(Compile->'&quot;%(ObjectPath)&quot;')" />

            <_Args Include="-o;&quot;$(IntermediateOutputPath)$(TargetFileName)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
        
        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)$(TargetFileName)" />
            <FileWrites Include="$(IntermediateOutputPath)$(LibraryFileName)" />
            <FileWrites Include="$(IntermediateOutputPath)$(DebugSymbolsFileName)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetCopyToOutputDirectoryItems
    
    Collect any items that need to be copied to the output target directory (bin/lib/include).
    
    -->

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            $(GetCopyToOutputDirectoryItemsDependsOn);
            GetTransitiveClangTargetItems;
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetCopyToOutputDirectoryItems" DependsOnTargets="$(GetCopyToOutputDirectoryItemsDependsOn)" Returns="@(OutputItemsWithTargetPath)">
        <ItemGroup>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(TargetFileName)">
                <TargetPath>$(TargetPathName)$(TargetFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(LibraryFileName)" Condition=" '$(LibraryFileName)' != '' And Exists('$(IntermediateOutputPath)$(LibraryFileName)')">
                <TargetPath>$(LibraryPathName)$(LibraryFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(DebugSymbolsFileName)" Condition=" '$(DebugSymbolsFileName)' != '' ANd Exists('$(IntermediateOutputPath)$(DebugSymbolsFileName)')">
                <TargetPath>$(TargetPathName)$(DebugSymbolsFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="@(Header)" Condition=" '%(Header.CopyToIncludeDirectory)' == 'true' And '%(Header.IncludePath)' != '' ">
                <TargetPath>$(IncludePathName)%(Header.IncludePath)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="@(GetTransitiveClangTargetItems)" Condition=" '$(CopyProjectReferenceOutputToOutput)' == 'true' ">
                <TargetPath>$(TargetPathName)%(Filename)%(Extension)</TargetPath>
            </OutputItemsWithTargetPath>
            <_DebugSymbolsPathOutputItems Include="@(GetTransitiveClangTargetItems->'%(DebugSymbolsPath)')" Condition=" '%(DebugSymbolsPath)' != '' And Exists('%(DebugSymbolsPath)')" />
            <OutputItemsWithTargetPath Include="@(_DebugSymbolsPathOutputItems)" Condition=" '$(CopyProjectReferenceOutputToOutput)' == 'true' And '@(_DebugSymbolsPathOutputItems)' != '' ">
                <TargetPath>$(TargetPathName)%(Filename)%(Extension)</TargetPath>
            </OutputItemsWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CoreBuildDependsOn>
            AssignProjectConfiguration;
            Compile;
            Link;
            CopyFilesToOutputDirectory;
        </CoreBuildDependsOn>
    </PropertyGroup>

    <Target Name="CoreBuild" DependsOnTargets="$(CoreBuildDependsOn)" />

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
        </CoreCleanDependsOn>
    </PropertyGroup>

    <Target Name="CoreClean" DependsOnTargets="$(CoreCleanDependsOn)" />

</Project>
