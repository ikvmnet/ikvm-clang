<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <OutputType Condition=" '$(OutputType)' == '' ">SharedLibrary</OutputType>
        <OutputType>$(OutputType.ToLower())</OutputType>
        <UseLld Condition=" '$(UseLld)' == '' ">true</UseLld>
    </PropertyGroup>

    <PropertyGroup>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <PlatformName Condition=" '$(PlatformName)' == '' ">$(Platform)</PlatformName>
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <ConfigurationName Condition=" '$(ConfigurationName)' == '' ">$(Configuration)</ConfigurationName>

        <BaseOutputPath Condition=" '$(BaseOutputPath)' == '' ">bin\</BaseOutputPath>
        <BaseOutputPath Condition="!HasTrailingSlash('$(BaseOutputPath)')">$(BaseOutputPath)\</BaseOutputPath>
        <OutputPath Condition=" '$(OutputPath)' == '' ">$(BaseOutputPath)$(Configuration)\$(TargetMachine)\</OutputPath>
        <OutputPath Condition="!HasTrailingSlash('$(OutputPath)')">$(OutputPath)\</OutputPath>

        <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">obj\</BaseIntermediateOutputPath>
        <BaseIntermediateOutputPath Condition="!HasTrailingSlash('$(BaseIntermediateOutputPath)')">$(BaseIntermediateOutputPath)\</BaseIntermediateOutputPath>
        <IntermediateOutputPath Condition=" '$(IntermediateOutputPath)' == '' ">$(BaseIntermediateOutputPath)$(Configuration)\$(TargetMachine)</IntermediateOutputPath>
        <IntermediateOutputPath Condition="!HasTrailingSlash('$(IntermediateOutputPath)')">$(IntermediateOutputPath)\</IntermediateOutputPath>
    </PropertyGroup>

    <PropertyGroup>
        <DebugSymbols Condition=" '$(ConfigurationName)' == 'Debug' And '$(DebugSymbols)' == '' ">true</DebugSymbols>
    </PropertyGroup>

    <PropertyGroup>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' "></TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And '$(OutputType)' == 'sharedlibrary' And $(TargetMachine.Contains('-linux-')) ">lib</TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And '$(OutputType)' == 'sharedlibrary' And $(TargetMachine.Contains('-apple-')) ">lib</TargetPrefix>

        <TargetExt Condition=" '$(TargetPrefix)' == '' "></TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'exe' And $(TargetMachine.Contains('-windows-'))">.exe</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'sharedlibrary' And $(TargetMachine.Contains('-windows-')) ">.dll</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'sharedlibrary' And $(TargetMachine.Contains('-linux-')) ">.so</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'sharedlibrary' And $(TargetMachine.Contains('-apple-')) ">.dylib</TargetExt>

        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-windows-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-linux-')) ">.g</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-apple-')) ">.dsym</DebugSymbolsExt>
    </PropertyGroup>

    <PropertyGroup>
        <ProjectName Condition=" '$(ProjectName)' == '' ">$(MSBuildProjectName)</ProjectName>
        <TargetName Condition=" '$(TargetName)' == '' ">$(ProjectName)</TargetName>
        <ProjectFileName Condition=" '$(ProjectFileName)' == '' ">$(MSBuildProjectFile)</ProjectFileName>
        <ProjectExt Condition=" '$(ProjectExt)' == '' ">$(MSBuildProjectExtension)</ProjectExt>

        <TargetFileName Condition=" '$(TargetFileName)' == '' ">$(TargetPrefix)$(TargetName)$(TargetExt)</TargetFileName>
        <DebugSymbolsFileName Condition=" '$(DebugSymbolsFileName)' == '' ">$(TargetPrefix)$(TargetName)$(DebugSymbolsExt)</DebugSymbolsFileName>

        <IntermediateTargetPath Condition=" '$(IntermediateTargetPath)' == '' ">$(IntermediateOutputPath)$(TargetFileName)</IntermediateTargetPath>
        <TargetPath Condition=" '$(TargetPath)' == '' ">$(OutputPath)$(TargetFileName)</TargetPath>

        <IntermediateDebugSymbolsPath Condition=" '$(IntermediateDebugSymbolsPath)' == '' ">$(IntermediateOutputPath)$(DebugSymbolsFileName)</IntermediateDebugSymbolsPath>
        <DebugSymbolsPath Condition=" '$(DebugSymbolsPath)' == '' ">$(OutputPath)$(DebugSymbolsFileName)</DebugSymbolsPath>

        <ClangResponseFileName Condition=" '$(ClangResponseFileName)' == '' ">$(TargetName).clang.rsp</ClangResponseFileName>
        <ClangResponseFile Condition=" '$(ClangResponseFile)' == '' ">$(IntermediateOutputPath)$(ClangResponseFileName)</ClangResponseFile>
    </PropertyGroup>

    <!--
    
    GetTargetItem
    
    Externally callable target that returns information about the target being built.
    
    -->

    <PropertyGroup>
        <GetTargetItemDependsOn>
            $(GetTargetItemDependsOn)
        </GetTargetItemDependsOn>
    </PropertyGroup>

    <Target Name="GetTargetItem" DependsOnTargets="$(GetTargetItemDependsOn)" Returns="@(TargetItem)">
        <ItemGroup>
            <TargetItem Include="$(IntermediateTargetPath)">
                <TargetName>$(TargetName)</TargetName>
                <TargetFileName>$(TargetFileName)</TargetFileName>
                <DebugSymbolsFileName>$(DebugSymbolsFileName)</DebugSymbolsFileName>
                <Version>$(Version)</Version>
            </TargetItem>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <PreBuildEventDependsOn></PreBuildEventDependsOn>
        <PostBuildEventDependsOn></PostBuildEventDependsOn>
    </PropertyGroup>

    <Target
        Name="PreBuildEvent"
        Condition="'$(PreBuildEvent)'!=''"
        DependsOnTargets="$(PreBuildEventDependsOn)">

        <Exec WorkingDirectory="$(OutDir)" Command="$(PreBuildEvent)" />
    </Target>

    <Target
        Name="PostBuildEvent"
        Condition="'$(PostBuildEvent)'!=''"
        DependsOnTargets="$(PostBuildEventDependsOn)">

        <Exec WorkingDirectory="$(OutDir)" Command="$(PostBuildEvent)" />
    </Target>

    <PropertyGroup>
        <BuildDependsOn>
            BeforeBuild;
            CoreBuild;
            AfterBuild
        </BuildDependsOn>
    </PropertyGroup>

    <Target Name="Build" Condition=" '$(_InvalidConfigurationWarning)' != 'true' " DependsOnTargets="$(BuildDependsOn)" Returns="@(TargetPath)" />

    <Target Name="BeforeBuild"/>

    <Target Name="AfterBuild"/>

    <PropertyGroup>
        <CoreBuildDependsOn>
            PreBuildEvent;
            Compile;
            GetTargetItem;
            PrepareForRun;
            PostBuildEvent
        </CoreBuildDependsOn>
    </PropertyGroup>

    <Target Name="CoreBuild" DependsOnTargets="$(CoreBuildDependsOn)">
        <OnError ExecuteTargets="_TimeStampAfterCompile;PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
    </Target>

    <PropertyGroup>
        <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' != ''">$(MSBuildProjectDefaultTargets)</_ProjectDefaultTargets>
        <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' == ''">Build</_ProjectDefaultTargets>

        <RebuildDependsOn>
            BeforeRebuild;
            Clean;
            $(_ProjectDefaultTargets);
            AfterRebuild;
        </RebuildDependsOn>

        <RebuildDependsOn Condition=" '$(MSBuildProjectDefaultTargets)' == 'Rebuild' " >
            BeforeRebuild;
            Clean;
            Build;
            AfterRebuild;
        </RebuildDependsOn>
    </PropertyGroup>

    <Target Name="Rebuild" Condition=" '$(_InvalidConfigurationWarning)' != 'true' " DependsOnTargets="$(RebuildDependsOn)" Returns="$(TargetPath)"/>

    <Target Name="BeforeRebuild"/>

    <Target Name="AfterRebuild"/>

    <PropertyGroup>
        <CompileDependsOn>
            BeforeCompile;
            PrepareCompile;
            CoreCompile;
            AfterCompile;
        </CompileDependsOn>
    </PropertyGroup>

    <Target Name="Compile" DependsOnTargets="$(CompileDependsOn)"/>

    <Target Name="BeforeCompile" />

    <Target Name="AfterCompile" />

    <UsingTask TaskName="IkvmClangSdkGenerateUniqueFileName" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <MetadataName ParameterType="System.String" Required="true" />
            <Extension ParameterType="System.String" Required="true" />
            <Directory ParameterType="System.String" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
                var hs = new HashSet<string>();
                
                foreach (var item in Items)
                {
                    var i = 0;
                    var n = item.GetMetadata("FileName") ?? Path.ChangeExtension(Path.GetRandomFileName(), "");
                    var s = n;
                    while (hs.Add(s) == false)
                        s = n + "_" + (++i);
                    
                    item.SetMetadata(MetadataName, Path.Combine(Directory ?? "", s + Extension ?? item.GetMetadata("Extension")));
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="PrepareCompile">
        <MakeDir Directories="$(IntermediateOutputPath)" />

        <!-- ensure members of the Compile group have necessary metadata -->
        <ItemGroup>
            <_Compile Include="@(Compile)">
                <Language Condition=" '%(Compile.Language)' == '' And '%(Extension)' == '.c' ">C</Language>
                <Language Condition=" '%(Compile.Language)' == '' And '%(Extension)' == '.cpp' ">C++</Language>
                <LanguageStandard Condition=" '%(Compile.LanguageStandard)' == '' "></LanguageStandard>
            </_Compile>
        </ItemGroup>

        <ItemGroup>
            <Compile Remove="@(Compile)" />
        </ItemGroup>

        <IkvmClangSdkGenerateUniqueFileName Items="@(_Compile)" MetadataName="ObjectFilePath" Extension=".obj" Directory="$(IntermediateOutputPath)">
            <Output TaskParameter="Items" ItemName="Compile" />
        </IkvmClangSdkGenerateUniqueFileName>
    </Target>

    <PropertyGroup>
        <CoreCompileDependsOn>
            PrepareCompile;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="CoreCompile" DependsOnTargets="PrepareCompile" Inputs="@(Compile)" Outputs="%(ObjectFilePath)">
        <PropertyGroup>
            <_ObjectFilePath>%(Compile.ObjectFilePath)</_ObjectFilePath>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-c" />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetMachine)" />
            <_Args Include="-g" Condition=" '%(Compile.DebugSymbols)' == 'true' " />

            <_Args Include="-std=%(Compile.LanguageStandard)" Condition=" '%(Compile.LanguageStandard)' != '' " />
            <_Args Include="-fPIC" Condition=" '%(Compile.PositionIndependentCode)' == 'true' " />
            <_Args Include="-fms-compatibility" Condition=" '%(Compile.MsCompatibility)' == 'true' " />
            <_Args Include="-fms-compatibility-version=%(Compile.MsCompatibilityVersion)" Condition=" '%(Compile.MsCompatibilityVersion)' != '' " />

            <_SystemRootDirectories Include="%(Compile.SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;')" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Include="%(Compile.IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;')" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_SystemIncludeDirectories Include="%(Compile.SystemIncludeDirectories)" />
            <_Args Include="@(_SystemIncludeDirectories->'-isystem &quot;%(Identity)&quot;')" Condition=" '@(_SystemIncludeDirectories)' != '' " />

            <_IncludeDirectories Include="%(Compile.IncludeDirectories)" />
            <_Args Include="@(_IncludeDirectories->'-I &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_IncludeDirectories)' != '' " />

            <_PreprocessorDefinitions Include="%(Compile.PreprocessorDefinitions)" />
            <_Args Include="@(_PreprocessorDefinitions->'-D &quot;%(Identity)&quot;')" Condition=" '@(_PreprocessorDefinitions)' != '' " />

            <_AdditionalOptions Include="%(Compile.AdditionalOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="-x;c" Condition=" '%(Compile.Language)' == 'C' " />
            <_Args Include="-x;c++" Condition=" '%(Compile.Language)' == 'C++' " />

            <_Args Include="&quot;%(Compile.Identity)&quot;" />

            <_Args Include="-o;&quot;$(_ObjectFilePath)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
    </Target>

    <PropertyGroup>
        <LinkDependsOn>
            Compile;
            BeforeLink;
            PrepareLink;
            CoreLink;
            AfterLink;
        </LinkDependsOn>
    </PropertyGroup>

    <Target Name="Link" DependsOnTargets="$(LinkDependsOn)"/>

    <Target Name="BeforeLink" />

    <Target Name="AfterLink" />

    <Target Name="PrepareLink">
        <MakeDir Directories="$(IntermediateOutputPath)" />

        <ItemGroup>
            <Link Include="@(Compile->'%(ObjectFilePath)')">
                <OutputType>$(OutputType)</OutputType>
                <IntermediateTargetPath>$(IntermediateTargetPath)</IntermediateTargetPath>
                <TargetFilePath>$(TargetPath)</TargetFilePath>
            </Link>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CoreLinkDependsOn>
            PrepareLink;
            $(CoreLinkDependsOn);
        </CoreLinkDependsOn>
    </PropertyGroup>

    <Target Name="CoreLink" DependsOnTargets="Compile;$(CoreLinkDependsOn)" Inputs="@(Link)" Outputs="%(TargetFilePath)">
        <PropertyGroup>
            <_TargetFilePath>%(Link.TargetFilePath)</_TargetFilePath>
            <_IntermediateTargetPath>%(Link.IntermediateTargetPath)</_IntermediateTargetPath>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-shared" Condition=" '%(Link.OutputType)' == 'sharedlibrary' " />
            <_Args Include="-static" Condition=" '%(Link.OutputType)' == 'staticlibrary' " />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetMachine)" />
            <_Args Include="-fuse-ld=lld" Condition=" '$(UseLld)' == 'true' " />
            <_Args Include="-g" Condition=" '%(Link.DebugSymbols)' == 'true' " />

            <_SystemRootDirectories Include="%(Link.SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;')" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Include="%(Link.IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;')" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_LibraryDirectories Include="%(Link.LibraryDirectories)" />
            <_Args Include="@(_LibraryDirectories->'-L &quot;%(Identity)&quot;')" Condition=" '@(_LibraryDirectories)' != '' " />

            <_Dependencies Include="%(Link.Dependencies)" />
            <_Args Include="@(_Dependencies->'-l &quot;%(Identity)&quot;')" Condition=" '@(_Dependencies)' != '' " />

            <_AdditionalOptions Include="%(Link.AdditionalOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="&quot;%(Link.Identity)&quot;" />

            <_Args Include="-o;&quot;$(_IntermediateTargetPath)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
    </Target>

    <PropertyGroup>
        <CopyFilesToOutputDirectoryDependsOn>
            Compile;
            Link;
        </CopyFilesToOutputDirectoryDependsOn>
    </PropertyGroup>

    <Target Name="CopyFilesToOutputDirectory" DependsOnTargets="$(CopyFilesToOutputDirectoryDependsOn)">
        <PropertyGroup>
            <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
            <CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible>
            <ErrorIfLinkFailsForCopyFilesToOutputDirectory Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)' == ''">false</ErrorIfLinkFailsForCopyFilesToOutputDirectory>
        </PropertyGroup>

        <PropertyGroup>
            <CopyTargetToOutputDirectory Condition=" '$(CopyTargetToOutputDirectory)' == '' ">true</CopyTargetToOutputDirectory>
            <CopyDebugSymbolsToOutputDirectory Condition=" '$(CopyDebugSymbolsToOutputDirectory)' == '' ">true</CopyDebugSymbolsToOutputDirectory>
        </PropertyGroup>

        <Copy
            SourceFiles="$(IntermediateTargetPath)"
            DestinationFiles="$(TargetPath)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
            Condition="'$(CopyTargetToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
            <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>

        <Copy
            SourceFiles="$(IntermediateDebugSymbolsPath)"
            DestinationFiles="$(DebugSymbolsPath)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
            Condition="Exists('$(IntermediateDebugSymbolsPath)') And '$(CopyDebugSymbolsToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
            <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>

    </Target>

    <PropertyGroup>
        <PrepareForRunDependsOn>
            CopyFilesToOutputDirectory
        </PrepareForRunDependsOn>
    </PropertyGroup>

    <Target Name="PrepareForRun" DependsOnTargets="$(PrepareForRunDependsOn)">

    </Target>

</Project>
