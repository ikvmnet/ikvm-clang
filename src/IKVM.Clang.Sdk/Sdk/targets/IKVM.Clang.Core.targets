<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <TargetName Condition=" '$(TargetName)' == '' ">$(MSBuildProjectName)</TargetName>
        <OutputType Condition=" '$(OutputType)' == '' ">Shared</OutputType>
        <TargetTriple Condition=" '$(TargetTriple)' == '' ">$(TargetIdentifier)</TargetTriple>
        <ClangToolExe Condition=" '$(ClangToolName)' == '' And !$([MSBuild]::IsOSUnixLike())">clang.exe</ClangToolExe>
        <ClangToolExe Condition=" '$(ClangToolName)' == '' And  $([MSBuild]::IsOSUnixLike())">clang</ClangToolExe>
        <DebugSymbols Condition=" '$(DebugSymbols)' == '' And '$(Configuration)' == 'Debug' ">true</DebugSymbols>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-linux-')) ">.g</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriple.Contains('-apple-')) ">.dsym</DebugSymbolsExt>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'exe' ">
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' "></ExecutablePrefix>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And '$(OutputType)' == 'exe' And $(TargetTriple.Contains('-windows-'))">.exe</ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' "></ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-windows-'))">.dll</ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-linux-'))">.so</ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-apple-'))">.dylib</ExecutableExt>
        <ExecutableFileName Condition=" '$(ExecutableFileName)' == '' ">$(ExecutablePrefix)$(TargetName)$(ExecutableExt)</ExecutableFileName>
        <ExecutableIntermediateOutputPath Condition=" '$(ExecutableFileName)' != '' ">$(IntermediateOutputPath)$(ExecutableFileName)</ExecutableIntermediateOutputPath>
        <DebugSymbolsPrefix Condition=" '$(DebugSymbolsPrefix)' == '' "></DebugSymbolsPrefix>
        <Subsystem Condition=" '$(Subsystem)' == '' And $(TargetTriple.Contains('-windows-')) ">console</Subsystem>
        <CopyProjectReferenceOutputToOutput Condition=" '$(CopyProjectReferenceOutputToOutput)' == '' ">true</CopyProjectReferenceOutputToOutput>
        <UseLd Condition=" '$(UseLd)' == '' ">lld</UseLd>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'shared' ">
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' "></ExecutablePrefix>
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' And $(TargetTriple.Contains('-windows-'))"></ExecutablePrefix>
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' And $(TargetTriple.Contains('-linux-'))">lib</ExecutablePrefix>
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' And $(TargetTriple.Contains('-apple-'))">lib</ExecutablePrefix>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' "></ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-windows-'))">.dll</ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-linux-'))">.so</ExecutableExt>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' And $(TargetTriple.Contains('-apple-'))">.dylib</ExecutableExt>
        <ExecutableFileName Condition=" '$(ExecutableFileName)' == '' ">$(ExecutablePrefix)$(TargetName)$(ExecutableExt)</ExecutableFileName>
        <ExecutableIntermediateOutputPath Condition=" '$(ExecutableFileName)' != '' ">$(IntermediateOutputPath)$(ExecutableFileName)</ExecutableIntermediateOutputPath>
        <LibraryPrefix Condition=" '$(LibraryPrefix)' == '' And $(TargetTriple.Contains('-linux-')) ">lib</LibraryPrefix>
        <LibraryPrefix Condition=" '$(LibraryPrefix)' == '' And $(TargetTriple.Contains('-apple-')) ">lib</LibraryPrefix>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.lib</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-linux-')) ">.so</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-apple-')) ">.dylib</LibraryExt>
        <LibraryFileName Condition=" '$(LibraryFileName)' == '' ">$(LibraryPrefix)$(TargetName)$(LibraryExt)</LibraryFileName>
        <LibraryIntermediateOutputPath Condition=" '$(LibraryFileName)' != '' ">$(IntermediateOutputPath)$(LibraryFileName)</LibraryIntermediateOutputPath>
        <DebugSymbolsPrefix Condition=" '$(DebugSymbolsPrefix)' == '' And $(TargetTriple.Contains('-linux-')) ">lib</DebugSymbolsPrefix>
        <DebugSymbolsPrefix Condition=" '$(DebugSymbolsPrefix)' == '' And $(TargetTriple.Contains('-apple-')) ">lib</DebugSymbolsPrefix>
        <CopyProjectReferenceOutputToOutput Condition=" '$(CopyProjectReferenceOutputToOutput)' == '' ">false</CopyProjectReferenceOutputToOutput>
        <UseLd Condition=" '$(UseLd)' == '' ">lld</UseLd>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'static' ">
        <ExecutablePrefix Condition=" '$(ExecutablePrefix)' == '' "></ExecutablePrefix>
        <ExecutableExt Condition=" '$(ExecutableExt)' == '' "></ExecutableExt>
        <ExecutableFileName Condition=" '$(ExecutableFileName)' == '' "></ExecutableFileName>
        <ExecutableIntermediateOutputPath Condition=" '$(ExecutableFileName)' != '' ">$(IntermediateOutputPath)$(ExecutableFileName)</ExecutableIntermediateOutputPath>
        <LibraryPrefix Condition=" '$(LibraryPrefix)' == '' And $(TargetTriple.Contains('-linux-')) ">lib</LibraryPrefix>
        <LibraryPrefix Condition=" '$(LibraryPrefix)' == '' And $(TargetTriple.Contains('-apple-')) ">lib</LibraryPrefix>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.lib</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-linux-')) ">.a</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriple.Contains('-apple-')) ">.a</LibraryExt>
        <LibraryFileName Condition=" '$(LibraryFileName)' == '' ">$(LibraryPrefix)$(TargetName)$(LibraryExt)</LibraryFileName>
        <LibraryIntermediateOutputPath Condition=" '$(LibraryFileName)' != '' ">$(IntermediateOutputPath)$(LibraryFileName)</LibraryIntermediateOutputPath>
        <DebugSymbolsPrefix Condition=" '$(DebugSymbolsPrefix)' == '' And $(TargetTriple.Contains('-linux-')) ">lib</DebugSymbolsPrefix>
        <DebugSymbolsPrefix Condition=" '$(DebugSymbolsPrefix)' == '' And $(TargetTriple.Contains('-apple-')) ">lib</DebugSymbolsPrefix>
        <CopyProjectReferenceOutputToOutput Condition=" '$(CopyProjectReferenceOutputToOutput)' == '' ">false</CopyProjectReferenceOutputToOutput>
        <UseLd Condition=" '$(UseLd)' == '' And $(TargetTriple.Contains('-windows-'))">llvm-lib</UseLd>
        <UseLd Condition=" '$(UseLd)' == '' ">lld</UseLd>
    </PropertyGroup>

    <PropertyGroup>
        <ObjectExt Condition=" '$(ObjectExt)' == '' And $(TargetTriple.Contains('-windows-')) ">.obj</ObjectExt>
        <ObjectExt Condition=" '$(ObjectExt)' == '' ">.o</ObjectExt>
        <DebugSymbolsFileName Condition=" '$(DebugSymbolsFileName)' == '' ">$(DebugSymbolsPrefix)$(TargetName)$(DebugSymbolsExt)</DebugSymbolsFileName>
        <DebugSymbolsIntermediateOutputPath Condition=" '$(DebugSymbolsFileName)' != '' ">$(IntermediateOutputPath)$(DebugSymbolsFileName)</DebugSymbolsIntermediateOutputPath>
        <HeadersPathName Condition=" '$(HeadersPathName)' == '' ">headers\</HeadersPathName>
        <HeadersIntermediateOutputPath Condition=" '$(HeadersPathName)' != '' ">$(IntermediateOutputPath)$(HeadersPathName)</HeadersIntermediateOutputPath>
    </PropertyGroup>

    <!--
    
    AssignProjectConfiguration
    
    Assigns the appropriate configuration to each project in the list of project references passed in.
    Adds to the project references passed in any project references implied by dependencies expressed in the solution file, if any.
    
    -->

    <Target Name="AssignProjectConfiguration" Condition="'$(CurrentSolutionConfigurationContents)' != '' Or '@(ProjectReference)'!=''">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
            <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</AddSyntheticProjectReferencesForSolutionDependencies>
        </PropertyGroup>

        <AssignProjectConfiguration ProjectReferences="@(ProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="$(AddSyntheticProjectReferencesForSolutionDependencies)" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>

        <ItemGroup>
            <ProjectReferenceWithConfiguration>
                <Targets Condition="'%(ProjectReferenceWithConfiguration.Targets)' == ''">Build</Targets>
                <BuildReference Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
                <ReferenceTargetItems Condition="'%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == ''">true</ReferenceTargetItems>
                <CopyTargetItemsLocal Condition="'%(ProjectReferenceWithConfiguration.CopyTargetItemsLocal)' == ''">true</CopyTargetItemsLocal>
            </ProjectReferenceWithConfiguration>
        </ItemGroup>
    </Target>

    <!--
    
    ResolveProjectReferences
    
    Ensure any project references are properly built.
    
    -->

    <ItemDefinitionGroup>
        <ProjectReference>
            <ReferenceSourceTarget>ProjectReference</ReferenceSourceTarget>
        </ProjectReference>
    </ItemDefinitionGroup>

    <PropertyGroup>
        <ResolveProjectReferencesDependsOn>
            $(ResolveProjectReferencesDependsOn);
            AssignProjectConfiguration;
        </ResolveProjectReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveProjectReferences" DependsOnTargets="$(ResolveProjectReferencesDependsOn)" Returns="@(_ResolvedNativeItemProjectReferences)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="%(ProjectReferenceWithConfiguration.Targets)"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition=" '%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
        </MSBuild>
    </Target>

    <Target Name="ResolveProjectReferencesDesignTime">

    </Target>

    <!--
    
    GetTargetItem
    
    Externally callable target that returns information about the native target being built.
    
    -->

    <Target Name="GetTargetItem" Returns="@(GetTargetItem)">
        <ItemGroup>
            <GetTargetItem Include="$([System.IO.Path]::GetFullPath('$(OutputPath)$(TargetPathName)$(TargetFileName)'))">
                <TargetIdentifier>$(TargetIdentifier)</TargetIdentifier>
                <TargetName>$(TargetName)</TargetName>
                <TargetTriple>$(TargetTriple)</TargetTriple>
                <ExecutablePath Condition=" '$(ExecutableIntermediateOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(ExecutableIntermediateOutputPath)'))</ExecutablePath>
                <LibraryPath Condition=" '$(LibraryIntermediateOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(LibraryIntermediateOutputPath)'))</LibraryPath>
                <DebugSymbolsPath Condition=" '$(DebugSymbolsIntermediateOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(DebugSymbolsIntermediateOutputPath)'))</DebugSymbolsPath>
                <HeadersPath Condition=" '$(HeadersIntermediateOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(HeadersIntermediateOutputPath)'))</HeadersPath>
                <Version>$(Version)</Version>
                <CopyUpToDateMarker>@(CopyUpToDateMarker)</CopyUpToDateMarker>
            </GetTargetItem>
        </ItemGroup>
    </Target>

    <!--
    
    GetProjectReferenceTargetItems
    
    Externally callable target that returns information about the native target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetProjectReferenceTargetItems" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetProjectReferenceTargetItems)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetTargetItem"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' And '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="false"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="false">
            <Output TaskParameter="TargetOutputs" ItemName="_GetProjectReferenceTargetItems" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == 'true' "/>
        </MSBuild>
        <RemoveDuplicates Inputs="@(_GetProjectReferenceTargetItems)">
            <Output TaskParameter="Filtered" ItemName="__GetProjectReferenceTargetItems"/>
        </RemoveDuplicates>
        <ItemGroup>
            <GetProjectReferenceTargetItems Include="@(__GetProjectReferenceTargetItems)" />
        </ItemGroup>
    </Target>

    <!--
    
    ImportProjectReferenceItems
    
    Collect any items resolved from ProjectReferences and configure locally.
    
    -->
    <PropertyGroup>
        <ImportProjectReferenceItemsDependsOn>
            $(ImportProjectReferenceItemsDependsOn);
            AssignProjectConfiguration;
            GetProjectReferenceTargetItems;
        </ImportProjectReferenceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ImportProjectReferenceItems" DependsOnTargets="$(ImportProjectReferenceItemsDependsOn)">
        <ItemGroup>
            <IncludeDirectories Include="@(GetProjectReferenceTargetItems->'%(HeadersPath)')" />
            <_LibraryDirectories Remove="@(_LibraryDirectories)" />
            <_LibraryDirectories Include="@(GetProjectReferenceTargetItems->'%(LibraryPath)')" />
            <LibraryDirectories Include="@(_LibraryDirectories->'%(RootDir)%(Directory)')" />
            <Dependencies Include="@(GetProjectReferenceTargetItems->'%(TargetName)')" />
        </ItemGroup>
    </Target>

    <UsingTask TaskName="IkvmClangSdkGenerateUniqueFileName" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <MetadataName ParameterType="System.String" Required="true" />
            <Extension ParameterType="System.String" Required="true" />
            <Directory ParameterType="System.String" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
                var hs = new HashSet<string>();
                
                foreach (var item in Items)
                {
                    var i = 0;
                    var n = item.GetMetadata("FileName") ?? Path.ChangeExtension(Path.GetRandomFileName(), "");
                    var s = n;
                    while (hs.Add(s) == false)
                        s = n + "_" + (++i);
                    
                    item.SetMetadata(MetadataName, Path.Combine(Directory ?? "", s + Extension ?? item.GetMetadata("Extension")));
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    
    PrepareCompile
    
    Generates the ObjectPath metadata for each input Compile item by selecting a unique identifying name.
    
    -->

    <Target Name="PrepareCompile" DependsOnTargets="ImportProjectReferenceItems" Condition=" '@(Compile)' != '' ">
        <IkvmClangSdkGenerateUniqueFileName Items="@(Compile)" MetadataName="ObjectPath" Extension="$(ObjectExt)" Directory="$(IntermediateOutputPath)">
            <Output TaskParameter="Items" ItemName="_Compile" />
        </IkvmClangSdkGenerateUniqueFileName>

        <ItemGroup>
            <Compile Remove="@(Compile)" />
            <Compile Include="@(_Compile)" />
        </ItemGroup>
    </Target>

    <!--
    
    CoreCompile
    
    Invokes the Clang compiler for each Compile item to generate the output object file.
    
    -->

    <PropertyGroup>
        <CoreCompileDependsOn>
            $(CoreCompileDependsOn);
            ResolveProjectReferences;
            ImportProjectReferenceItems;
            PrepareCompile;
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="CoreCompile" DependsOnTargets="$(CoreCompileDependsOn)" Inputs="@(Compile)" Outputs="%(ObjectPath)">
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryname('%(Compile.ObjectPath)'))" />

        <PropertyGroup>
            <_SourcePath>%(Compile.Identity)</_SourcePath>
            <_ObjectPath>%(Compile.ObjectPath)</_ObjectPath>
            <_DebugSymbols>%(Compile.DebugSymbols)</_DebugSymbols>
            <_DebugSymbols Condition=" '$(_DebugSymbols)' == '' ">$(DebugSymbols)</_DebugSymbols>
            <_Language>%(Compile.Language)</_Language>
            <_Language Condition=" '$(_Language)' == '' ">$(Language)</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.c' ">c</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.cpp' ">c++</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.m' ">objective-c</_Language>
            <_Language Condition=" '$(_Language)' == '' And '%(Compile.Extension)' == '.mm' ">objective-c++</_Language>
            <_LanguageStandard>%(Compile.LanguageStandard)</_LanguageStandard>
            <_LanguageStandard Condition=" '$(_LanguageStandard)' == '' ">$(LanguageStandard)</_LanguageStandard>
            <_PositionIndependentCode>%(Compile.PositionIndependentCode)</_PositionIndependentCode>
            <_PositionIndependentCode Condition=" '$(_PositionIndependentCode)' == '' ">$(PositionIndependentCode)</_PositionIndependentCode>
            <_MsCompatibility>%(Compile.MsCompatibility)</_MsCompatibility>
            <_MsCompatibility Condition=" '$(_MsCompatibility)' == '' ">$(MsCompatibility)</_MsCompatibility>
            <_MsCompatibilityVersion>%(Compile.MsCompatibilityVersion)</_MsCompatibilityVersion>
            <_MsCompatibilityVersion Condition=" '$(_MsCompatibilityVersion)' == '' ">$(MsCompatibilityVersion)</_MsCompatibilityVersion>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-c" />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target" Value="$(TargetTriple)" Separator="=" />
            <_Args Include="-g" Condition=" '$(_DebugSymbols)' == 'true' " />

            <_Args Include="-std" Value="$(_LanguageStandard)" Separator="=" Condition=" '$(_LanguageStandard)' != '' " />
            <_Args Include="-fPIC" Condition=" '$(_PositionIndependentCode)' == 'true' " />
            <_Args Include="-fms-compatibility" Condition=" '$(_MsCompatibility)' == 'true' " />
            <_Args Include="-fms-compatibility-version" Value="$(_MsCompatibilityVersion)" Separator="=" Condition=" '$(_MsCompatibilityVersion)' != '' " />

            <_Args Include="-x;$(_Language)" Condition=" '$(_Language)' != '' " />

            <_SystemRootDirectories Remove="@(_SystemRootDirectories)" />
            <_SystemRootDirectories Include="%(Compile.SystemRootDirectories)" />
            <_SystemRootDirectories Include="@(SystemRootDirectories)" />
            <_SystemRootDirectories Include="$(SystemRootDirectories)" />
            <_SystemRootDirectoriesTemp Remove="@(_SystemRootDirectoriesTemp)" />
            <_SystemRootDirectoriesTemp Include="@(_SystemRootDirectories->Distinct())" />
            <_SystemRootDirectoriesArgs Remove="@(_SystemRootDirectoriesArgs)" />
            <_SystemRootDirectoriesArgs Include="@(_SystemRootDirectoriesTemp->'--sysroot')" Value="%(_SystemRootDirectoriesTemp.Identity)" Separator=" " />
            <_Args Include="@(_SystemRootDirectoriesArgs)" />

            <_IncludeSystemRootDirectories Remove="@(_IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="%(Compile.IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="@(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="$(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectoriesTemp Remove="@(_IncludeSystemRootDirectoriesTemp)" />
            <_IncludeSystemRootDirectoriesTemp Include="@(_IncludeSystemRootDirectories->Distinct())" />
            <_IncludeSystemRootDirectoriesArgs Remove="@(_IncludeSystemRootDirectoriesArgs)" />
            <_IncludeSystemRootDirectoriesArgs Include="@(_IncludeSystemRootDirectoriesTemp->'-isysroot')" Value="%(_IncludeSystemRootDirectoriesTemp.Identity)" Separator=" " />
            <_Args Include="@(_IncludeSystemRootDirectoriesArgs)" />

            <_SystemIncludeDirectories Remove="@(_SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="%(Compile.SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="@(SystemIncludeDirectories)" />
            <_SystemIncludeDirectories Include="$(SystemIncludeDirectories)" />
            <_SystemIncludeDirectoriesTemp Remove="@(_SystemIncludeDirectoriesTemp)" />
            <_SystemIncludeDirectoriesTemp Include="@(_SystemIncludeDirectories->Distinct())" />
            <_SystemIncludeDirectoriesArgs Remove="@(_SystemIncludeDirectoriesArgs)" />
            <_SystemIncludeDirectoriesArgs Include="@(_SystemIncludeDirectoriesTemp->'-isystem')" Value="%(_SystemIncludeDirectoriesTemp.Identity)" Separator=" " />
            <_Args Include="@(_SystemIncludeDirectoriesArgs)" />

            <_IncludeDirectories Remove="@(_IncludeDirectories)" />
            <_IncludeDirectories Include="%(Compile.IncludeDirectories)" />
            <_IncludeDirectories Include="@(IncludeDirectories)" />
            <_IncludeDirectories Include="$(IncludeDirectories)" />
            <_IncludeDirectoriesTemp Remove="@(_IncludeDirectoriesTemp)" />
            <_IncludeDirectoriesTemp Include="@(_IncludeDirectories->Distinct())" />
            <_IncludeDirectoriesArgs Remove="@(_IncludeDirectoriesArgs)" />
            <_IncludeDirectoriesArgs Include="@(_IncludeDirectoriesTemp->'-I')" Value="%(_IncludeDirectoriesTemp.Identity)" Separator="" />
            <_Args Include="@(_IncludeDirectoriesArgs)" />

            <_PreprocessorDefinitions Remove="@(_PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="%(Compile.PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="@(PreprocessorDefinitions)" />
            <_PreprocessorDefinitions Include="$(PreprocessorDefinitions)" />
            <_PreprocessorDefinitionsArgs Remove="@(_PreprocessorDefinitionsArgs)" />
            <_PreprocessorDefinitionsArgs Include="@(_PreprocessorDefinitions->'-D')" Value="%(_PreprocessorDefinitions.Identity)" Separator="" Value2="%(_PreprocessorDefinitions.Value)" Separator2="=" />
            <_Args Include="@(_PreprocessorDefinitionsArgs)" />

            <_AdditionalOptions Remove="@(_AdditionalOptions)" />
            <_AdditionalOptions Include="%(Compile.AdditionalCompileOptions)" />
            <_AdditionalOptions Include="@(AdditionalCompileOptions)" />
            <_AdditionalOptions Include="$(AdditionalCompileOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="$(_SourcePath)" />

            <_Args Include="-o" Value="$(_ObjectPath)" Separator=" " />
        </ItemGroup>

        <ClangExe ToolExe="$(ClangToolExe)" Arguments="@(_Args)" />

        <ItemGroup>
            <FileWrites Include="$(_ObjectPath)" />
        </ItemGroup>

        <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''" />
    </Target>

    <!--
    
    CoreLink
    
    Invokes the Clang compiler for the set of all object files to produce the final taraget, library and debug symbols.
    
    -->

    <PropertyGroup>
        <CoreLinkDependsOn>
            $(CoreLinkDependsOn);
            Compile;
            ImportProjectReferenceItems;
        </CoreLinkDependsOn>
    </PropertyGroup>

    <Target Name="CoreLink" DependsOnTargets="$(CoreLinkDependsOn)" Inputs="@(Compile->'%(ObjectPath)')" Outputs="$(IntermediateOutputPath)$(TargetFileName)">
        <MakeDir Directories="$(IntermediateOutputPath)" />
        
        <PropertyGroup>
            <_OutputPath Condition=" '$(LibraryIntermediateOutputPath)' != '' ">$(LibraryIntermediateOutputPath)</_OutputPath>
            <_OutputPath Condition=" '$(ExecutableIntermediateOutputPath)' != '' ">$(ExecutableIntermediateOutputPath)</_OutputPath>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-shared" Condition=" '$(OutputType)' == 'shared' " />
            <_Args Include="-static" Condition=" '$(OutputType)' == 'static' " />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target" Value="$(TargetTriple)" Separator="=" />
            <_Args Include="-fuse-ld" Value="$(UseLd)" Separator="=" Condition=" '$(UseLd)' != '' " />
            <_Args Include="-g" Condition=" '$(DebugSymbols)' == 'true' " />

            <_Args Include="-Wl,/subsystem:$(Subsystem)" Condition=" '$(Subsystem)' != '' " />

            <_SystemRootDirectories Remove="@(_SystemRootDirectories)" />
            <_SystemRootDirectories Include="%(Compile.SystemRootDirectories)" />
            <_SystemRootDirectories Include="@(SystemRootDirectories)" />
            <_SystemRootDirectories Include="$(SystemRootDirectories)" />
            <_SystemRootDirectoriesTemp Remove="@(_SystemRootDirectoriesTemp)" />
            <_SystemRootDirectoriesTemp Include="@(_SystemRootDirectories->Distinct())" />
            <_SystemRootDirectoriesArgs Remove="@(_SystemRootDirectoriesArgs)" />
            <_SystemRootDirectoriesArgs Include="@(_SystemRootDirectoriesTemp->'--sysroot')" Value="%(_SystemRootDirectoriesTemp.Identity)" Separator=" " />
            <_Args Include="@(_SystemRootDirectoriesArgs)" />

            <_IncludeSystemRootDirectories Remove="@(_IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="%(Compile.IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="@(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectories Include="$(IncludeSystemRootDirectories)" />
            <_IncludeSystemRootDirectoriesTemp Remove="@(_IncludeSystemRootDirectoriesTemp)" />
            <_IncludeSystemRootDirectoriesTemp Include="@(_IncludeSystemRootDirectories->Distinct())" />
            <_IncludeSystemRootDirectoriesArgs Remove="@(_IncludeSystemRootDirectoriesArgs)" />
            <_IncludeSystemRootDirectoriesArgs Include="@(_IncludeSystemRootDirectoriesTemp->'-isysroot')" Value="%(_IncludeSystemRootDirectoriesTemp.Identity)" Separator=" " />
            <_Args Include="@(_IncludeSystemRootDirectoriesArgs)" />

            <_LibraryDirectories Remove="@(_LibraryDirectories)" />
            <_LibraryDirectories Include="@(LibraryDirectories)" />
            <_LibraryDirectories Include="$(LibraryDirectories)" />
            <_LibraryDirectoriesTemp Remove="@(_LibraryDirectoriesTemp)" />
            <_LibraryDirectoriesTemp Include="@(_LibraryDirectories->Distinct())" />
            <_LibraryDirectoriesArgs Remove="@(_LibraryDirectoriesArgs)" />
            <_LibraryDirectoriesArgs Include="@(_LibraryDirectoriesTemp->'-L')" Value="%(_LibraryDirectoriesTemp.Identity)" Separator="" />
            <_Args Include="@(_LibraryDirectoriesArgs)" />

            <_Dependencies Remove="@(_Dependencies)" />
            <_Dependencies Include="@(Dependencies)" />
            <_Dependencies Include="$(Dependencies)" />
            <_DependenciesTemp Remove="@(_DependenciesTemp)" />
            <_DependenciesTemp Include="@(_Dependencies->Distinct())" />
            <_DependenciesArgs Remove="@(_DependenciesArgs)" />
            <_DependenciesArgs Include="@(_DependenciesTemp->'-l')" Value="%(_DependenciesTemp.Identity)" Separator="" />
            <_Args Include="@(_DependenciesArgs)" />

            <_AdditionalOptions Remove="@(_AdditionalOptions)" />
            <_AdditionalOptions Include="@(AdditionalLinkOptions)" />
            <_AdditionalOptions Include="$(AdditionalLinkOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="@(Compile->'%(ObjectPath)')" />

            <_Args Include="-o" Value="$(_OutputPath)" Separator=" " />
        </ItemGroup>

        <ClangExe ToolExe="$(ClangToolExe)" Arguments="@(_Args)" />

        <ItemGroup>
            <FileWrites Include="$(ExecutableIntermediateOutputPath)" />
            <FileWrites Include="$(LibraryIntermediateOutputPath)" />
            <FileWrites Include="$(DebugSymbolsIntermediateOutputPath)" />
        </ItemGroup>

        <CallTarget Targets="$(TargetsTriggeredByLinking)" Condition="'$(TargetsTriggeredByLinking)' != ''" />
    </Target>
    
    <!--
    
    CopyHeaders
    
    Collect any headers and copy to temp directory.
    
    -->

    <Target Name="PrepareCopyHeaders">
        <ItemGroup>
            <Header Update="@(Header)">
                <IncludePath Condition=" '%(Header.IncludePath)' == '' ">%(RecursiveDir)%(Filename)%(Extension)</IncludePath>
            </Header>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CopyHeadersDependsOn>
            $(CopyHeadersDependsOn);
            PrepareCopyHeaders;
        </CopyHeadersDependsOn>
    </PropertyGroup>

    <Target Name="CopyHeaders" DependsOnTargets="$(CopyHeadersDependsOn)" Inputs="@(Header)" Outputs="@(Header->'$(HeadersIntermediateOutputPath)%(IncludePath)')">
        <Copy
            SourceFiles="@(Header)"
            DestinationFiles="@(Header->'$(HeadersIntermediateOutputPath)%(IncludePath)')"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)">
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>
    </Target>

    <!--
    
    GetCopyToOutputDirectoryItems
    
    Collect any items that need to be copied to the output target directory (bin/lib/include).
    
    -->

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            $(GetCopyToOutputDirectoryItemsDependsOn);
            GetProjectReferenceTargetItems;
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetCopyToOutputDirectoryItems" DependsOnTargets="$(GetCopyToOutputDirectoryItemsDependsOn)" Returns="@(OutputItemsWithTargetPath)">
        <ItemGroup>
            <OutputItemsWithTargetPath Include="$(ExecutableIntermediateOutputPath)" Condition=" '$(ExecutableIntermediateOutputPath)' != '' And Exists('$(ExecutableIntermediateOutputPath)')">
                <TargetPath>$(ExecutableFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="$(DebugSymbolsIntermediateOutputPath)" Condition=" '$(DebugSymbolsIntermediateOutputPath)' != '' And Exists('$(DebugSymbolsIntermediateOutputPath)')">
                <TargetPath>$(DebugSymbolsFileName)</TargetPath>
            </OutputItemsWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CoreBuildDependsOn>
            AssignProjectConfiguration;
            Compile;
            Link;
            CopyHeaders;
            CopyFilesToOutputDirectory;
        </CoreBuildDependsOn>
    </PropertyGroup>

    <Target Name="CoreBuild" DependsOnTargets="$(CoreBuildDependsOn)" />

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
        </CoreCleanDependsOn>
    </PropertyGroup>

    <Target Name="CoreClean" DependsOnTargets="$(CoreCleanDependsOn)" />

</Project>
