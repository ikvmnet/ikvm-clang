<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <OutputType Condition=" '$(OutputType)' == '' ">Library</OutputType>
        <TargetTriplet Condition=" '$(TargetTriplet)' == '' ">$(TargetIdentifier)</TargetTriplet>
        <UseLld Condition=" '$(UseLld)' == '' ">true</UseLld>
        <DebugSymbols Condition=" '$(DebugSymbols)' == '' And '$(Configuration)' == 'Debug' ">true</DebugSymbols>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'exe' ">
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' "></TargetPrefix>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)' == 'exe' And $(TargetTriplet.Contains('-windows-'))">.exe</TargetExt>
        <Subsystem Condition=" '$(Subsystem)' == '' And $(TargetTriplet.Contains('-windows-')) ">console</Subsystem>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OutputType)' == 'library' ">
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' "></TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And $(TargetTriplet.Contains('-linux-')) ">lib</TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And $(TargetTriplet.Contains('-apple-')) ">lib</TargetPrefix>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriplet.Contains('-windows-')) ">.dll</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriplet.Contains('-linux-')) ">.so</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And $(TargetTriplet.Contains('-apple-')) ">.dylib</TargetExt>
    </PropertyGroup>

    <PropertyGroup>
        <ObjectExt Condition=" '$(ObjectExt)' == '' And $(TargetTriplet.Contains('-windows-')) ">.obj</ObjectExt>
        <ObjectExt Condition=" '$(ObjectExt)' == '' ">.o</ObjectExt>
    </PropertyGroup>

    <PropertyGroup>
        <LibraryExt Condition=" '$(LibraryExt)' == '' And $(TargetTriplet.Contains('-windows-')) ">.lib</LibraryExt>
        <LibraryExt Condition=" '$(LibraryExt)' == '' ">.a</LibraryExt>
    </PropertyGroup>

    <PropertyGroup>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriplet.Contains('-windows-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriplet.Contains('-linux-')) ">.g</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetTriplet.Contains('-apple-')) ">.dsym</DebugSymbolsExt>
    </PropertyGroup>

    <PropertyGroup>
        <TargetName Condition=" '$(TargetName)' == '' ">$(ProjectName)</TargetName>
        <TargetFileName Condition=" '$(TargetFileName)' == '' ">$(TargetPrefix)$(TargetName)$(TargetExt)</TargetFileName>
        <LibraryFileName Condition=" '$(LibraryFileName)' == '' ">$(TargetPrefix)$(TargetName)$(LibraryExt)</LibraryFileName>
        <DebugSymbolsFileName Condition=" '$(DebugSymbolsFileName)' == '' ">$(TargetPrefix)$(TargetName)$(DebugSymbolsExt)</DebugSymbolsFileName>

        <!-- output libraries and binaries to different directories -->
        <LibraryPathName Condition=" '$(LibraryPathName)' == '' ">lib\</LibraryPathName>
        <BinaryPathName Condition=" '$(BinaryPathName)' == '' ">bin\</BinaryPathName>
        <IncludePathName Condition=" '$(IncludePathName)' == '' ">include\</IncludePathName>
        <TargetPathName Condition=" '$(OutputType)' == 'library' ">$(LibraryPathName)</TargetPathName>
        <TargetPathName Condition=" '$(OutputType)' == 'exe' ">$(BinaryPathName)</TargetPathName>
    </PropertyGroup>

    <!--
    
    AssignProjectConfiguration
    
    Assigns the appropriate configuration to each project in the list of project references passed in.
    Adds to the project references passed in any project references implied by dependencies expressed in the solution file, if any.
    
    -->

    <Target Name="AssignProjectConfiguration" Condition="'$(CurrentSolutionConfigurationContents)' != '' Or '@(ProjectReference)'!=''">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
            <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</AddSyntheticProjectReferencesForSolutionDependencies>
        </PropertyGroup>

        <AssignProjectConfiguration ProjectReferences="@(ProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="$(AddSyntheticProjectReferencesForSolutionDependencies)" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>

        <ItemGroup>
            <ProjectReferenceWithConfiguration>
                <Targets Condition="'%(ProjectReferenceWithConfiguration.Targets)' == ''">Build</Targets>
                <BuildReference Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
                <ReferenceTargetItems Condition="'%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == ''">true</ReferenceTargetItems>
                <CopyTargetItemsLocal Condition="'%(ProjectReferenceWithConfiguration.CopyTargetItemsLocal)' == ''">true</CopyTargetItemsLocal>
                <ReferenceIncludeDirectories Condition="'%(ProjectReferenceWithConfiguration.ReferenceIncludeDirectories)' == ''">true</ReferenceIncludeDirectories>
                <ReferenceLibraryDirectories Condition="'%(ProjectReferenceWithConfiguration.ReferenceLibraryDirectories)' == ''">true</ReferenceLibraryDirectories>
                <ReferenceDependencies Condition="'%(ProjectReferenceWithConfiguration.ReferenceDependencies)' == ''">true</ReferenceDependencies>
            </ProjectReferenceWithConfiguration>
        </ItemGroup>

        <Message Text="ProjectReferenceWithConfiguration: @(ProjectReferenceWithConfiguration->'%(BuildReference)')" Importance="high" />
    </Target>

    <!--
    
    ResolveProjectReferences
    
    Ensure any project references are properly built.
    
    -->

    <ItemDefinitionGroup>
        <ProjectReference>
            <ReferenceSourceTarget>ProjectReference</ReferenceSourceTarget>
        </ProjectReference>
    </ItemDefinitionGroup>

    <PropertyGroup>
        <ResolveProjectReferencesDependsOn>
            $(ResolveProjectReferencesDependsOn);
            AssignProjectConfiguration;
        </ResolveProjectReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveProjectReferences" DependsOnTargets="$(ResolveProjectReferencesDependsOn)" Returns="@(_ResolvedNativeItemProjectReferences)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="%(ProjectReferenceWithConfiguration.Targets)"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition=" '%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And ('$(BuildingInsideVisualStudio)' == 'true' Or '$(BuildProjectReferences)' != 'true') And '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
        </MSBuild>
    </Target>

    <Target Name="ResolveProjectReferencesDesignTime">

    </Target>

    <!--
    
    GetTargetItem
    
    Externally callable target that returns information about the native target being built.
    
    -->

    <Target Name="GetTargetItem" Returns="@(GetTargetItem)">
        <ItemGroup>
            <GetTargetItem Include="$(IntermediateOutputPath)$(TargetFileName)">
                <TargetIdentifier>$(TargetIdentifier)</TargetIdentifier>
                <TargetName>$(TargetName)</TargetName>
                <LibraryPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)$(LibraryFileName)'))</LibraryPath>
                <DebugSymbolsPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)$(DebugSymbolsFileName)'))</DebugSymbolsPath>
                <IncludePath>$([System.IO.Path]::GetFullPath('$(OutputPath)$(IncludePathName)'))</IncludePath>
                <Version>$(Version)</Version>
                <CopyUpToDateMarker>@(CopyUpToDateMarker)</CopyUpToDateMarker>
            </GetTargetItem>
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveTargetItems
    
    Externally callable target that returns information about the native target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetTransitiveTargetItems" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveTargetItems)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetTargetItem;GetTransitiveTargetItems"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveTargetItems" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceTargetItems)' == 'true' "/>
        </MSBuild>
        <ItemGroup>
            <GetTransitiveTargetItems Include="@(_GetTransitiveTargetItems)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetIncludeDirectories
    
    Externally callable target that returns the include directory information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetIncludeDirectories" Returns="@(GetIncludeDirectories)">
        <ItemGroup>
            <GetIncludeDirectories Include="$(IncludeDirectories)" />
            <GetIncludeDirectories Include="@(IncludeDirectories)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveIncludeDirectories" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveIncludeDirectories)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetIncludeDirectories;GetTransitiveIncludeDirectories"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveIncludeDirectories" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceIncludeDirectories)' == 'true' "/>
        </MSBuild>
        <ItemGroup>
            <GetTransitiveIncludeDirectories Include="@(_GetTransitiveIncludeDirectories)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveLibraryDirectories
    
    Externally callable target that returns the library directory information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetLibraryDirectories" Returns="@(GetLibraryDirectories)">
        <ItemGroup>
            <GetLibraryDirectories Include="$(LibraryDirectories)" />
            <GetLibraryDirectories Include="@(LibraryDirectories)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveLibraryDirectories" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveLibraryDirectories)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetLibraryDirectories;GetTransitiveLibraryDirectories"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveLibraryDirectories" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceLibraryDirectories)' == 'true' "/>
        </MSBuild>
        <ItemGroup>
            <GetTransitiveLibraryDirectories Include="@(_GetTransitiveLibraryDirectories)" />
        </ItemGroup>
    </Target>

    <!--
    
    GetTransitiveDependencies
    
    Externally callable target that returns the dependency information about the target being built and the same for any dependent project references.
    
    -->

    <Target Name="GetDependencies" Returns="@(GetDependencies)">
        <ItemGroup>
            <GetDependencies Include="$(Dependencies)" />
            <GetDependencies Include="@(Dependencies)" />
        </ItemGroup>
    </Target>

    <Target Name="GetTransitiveDependencies" DependsOnTargets="AssignProjectConfiguration" Returns="@(GetTransitiveDependencies)">
        <MSBuild
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="GetDependencies;GetTransitiveDependencies"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(ProjectReferenceWithConfiguration.SetConfiguration);%(ProjectReferenceWithConfiguration.SetPlatform);%(ProjectReferenceWithConfiguration.SetTargetIdentifier);"
            Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(ProjectReferenceWithConfiguration)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(ProjectReferenceWithConfiguration.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"
            RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_GetTransitiveDependencies" Condition=" '%(ProjectReferenceWithConfiguration.ReferenceDependencies)' == 'true' "/>
        </MSBuild>
        <ItemGroup>
            <GetTransitiveDependencies Include="@(_GetTransitiveDependencies)" />
        </ItemGroup>
    </Target>

    <!--
    
    ImportTransitiveProjectReferenceItems
    
    Collect any items resolved from ProjectReferences and configure locally.
    
    -->
    <PropertyGroup>
        <ImportTransitiveProjectReferenceItemsDependsOn>
            $(ImportTransitiveProjectReferenceItemsDependsOn);
            AssignProjectConfiguration;
            GetTransitiveTargetItems;
            GetTransitiveIncludeDirectories;
            GetTransitiveLibraryDirectories;
            GetTransitiveDependencies;
        </ImportTransitiveProjectReferenceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ImportTransitiveProjectReferenceItems" DependsOnTargets="$(ImportTransitiveProjectReferenceItemsDependsOn)">
        <ItemGroup>
            <ImportedIncludeDirectories Include="@(GetTransitiveTargetItems->'%(IncludePath)')" />
            <ImportedIncludeDirectories Include="@(GetTransitiveIncludeDirectories)" />
        </ItemGroup>
        <ItemGroup>
            <_GetTransitiveTargetItems Include="@(GetTransitiveTargetItems->'%(LibraryPath)')" />
            <ImportedLibraryDirectories Include="@(_GetTransitiveTargetItems->'%(RootDir)%(Directory)')" />
            <ImportedLibraryDirectories Include="@(GetTransitiveLibraryDirectories)" />
            <ImportedDependencies Include="@(GetTransitiveTargetItems->'%(TargetName)')" />
            <ImportedDependencies Include="@(GetTransitiveDependencies)" />
        </ItemGroup>
    </Target>

    <UsingTask TaskName="IkvmClangSdkGenerateUniqueFileName" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <MetadataName ParameterType="System.String" Required="true" />
            <Extension ParameterType="System.String" Required="true" />
            <Directory ParameterType="System.String" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
                var hs = new HashSet<string>();
                
                foreach (var item in Items)
                {
                    var i = 0;
                    var n = item.GetMetadata("FileName") ?? Path.ChangeExtension(Path.GetRandomFileName(), "");
                    var s = n;
                    while (hs.Add(s) == false)
                        s = n + "_" + (++i);
                    
                    item.SetMetadata(MetadataName, Path.Combine(Directory ?? "", s + Extension ?? item.GetMetadata("Extension")));
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <CoreCompileDependsOn>
            $(CoreCompileDependsOn);
            ResolveProjectReferences;
            ImportTransitiveProjectReferenceItems;
            PrepareCompile;
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="PrepareCompile" Condition=" '@(Compile)' != '' ">
        <!-- ensure members of the Compile group have necessary metadata -->
        <ItemGroup>
            <_Compile Include="@(Compile)">
                <Language Condition=" '%(Compile.Language)' == '' And '%(Extension)' == '.c' ">C</Language>
                <Language Condition=" '%(Compile.Language)' == '' And '%(Extension)' == '.cpp' ">C++</Language>
                <LanguageStandard Condition=" '%(Compile.LanguageStandard)' == '' "></LanguageStandard>
            </_Compile>
        </ItemGroup>

        <ItemGroup>
            <Compile Remove="@(Compile)" />
        </ItemGroup>

        <IkvmClangSdkGenerateUniqueFileName Items="@(_Compile)" MetadataName="OutputPath" Extension="$(ObjectExt)" Directory="$(IntermediateOutputPath)">
            <Output TaskParameter="Items" ItemName="Compile" />
        </IkvmClangSdkGenerateUniqueFileName>
    </Target>

    <Target Name="CoreCompile" DependsOnTargets="$(CoreCompileDependsOn)" Inputs="@(Compile)" Outputs="%(OutputPath)">
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryname('%(Compile.OutputPath)'))" />

        <PropertyGroup>
            <_OutputPath>%(Compile.OutputPath)</_OutputPath>
        </PropertyGroup>

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-c" />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetTriplet)" />
            <_Args Include="-g" Condition=" '%(Compile.DebugSymbols)' == 'true' " />

            <_Args Include="-std=%(Compile.LanguageStandard)" Condition=" '%(Compile.LanguageStandard)' != '' " />
            <_Args Include="-fPIC" Condition=" '%(Compile.PositionIndependentCode)' == 'true' " />
            <_Args Include="-fms-compatibility" Condition=" '%(Compile.MsCompatibility)' == 'true' " />
            <_Args Include="-fms-compatibility-version=%(Compile.MsCompatibilityVersion)" Condition=" '%(Compile.MsCompatibilityVersion)' != '' " />

            <_SystemRootDirectories Include="%(Compile.SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;')" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Include="%(Compile.IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;')" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_SystemIncludeDirectories Include="%(Compile.SystemIncludeDirectories)" />
            <_Args Include="@(_SystemIncludeDirectories->'-isystem &quot;%(Identity)&quot;')" Condition=" '@(_SystemIncludeDirectories)' != '' " />

            <_IncludeDirectories Include="%(Compile.IncludeDirectories)" />
            <_IncludeDirectories Include="@(IncludeDirectories)" />
            <_IncludeDirectories Include="@(ImportedIncludeDirectories)" />
            <_Args Include="@(_IncludeDirectories->'-I &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_IncludeDirectories)' != '' " />

            <_PreprocessorDefinitions Include="%(Compile.PreprocessorDefinitions)" />
            <_Args Include="@(_PreprocessorDefinitions->'-D &quot;%(Identity)&quot;')" Condition=" '@(_PreprocessorDefinitions)' != '' " />

            <_AdditionalOptions Include="%(Compile.AdditionalOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="-x;c" Condition=" '%(Compile.Language)' == 'C' " />
            <_Args Include="-x;c++" Condition=" '%(Compile.Language)' == 'C++' " />

            <_Args Include="&quot;%(Compile.Identity)&quot;" />

            <_Args Include="-o;&quot;$(_OutputPath)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
    </Target>

    <PropertyGroup>
        <CoreLinkDependsOn>
            $(CoreLinkDependsOn);
            Compile;
            ImportTransitiveProjectReferenceItems;
        </CoreLinkDependsOn>
    </PropertyGroup>

    <Target Name="CoreLink" DependsOnTargets="$(CoreLinkDependsOn)" Inputs="@(Compile->'%(OutputPath)')" Outputs="$(IntermediateOutputPath)$(TargetFileName);$(IntermediateOutputPath)$(DebugSymbolsFileName)">
        <MakeDir Directories="$(IntermediateOutputPath)" />

        <ItemGroup>
            <_Args Remove="@(_Args)" />
            <_Args Include="-shared" Condition=" '$(OutputType)' == 'library' " />
            <_Args Include="-static" Condition=" '$(OutputType)' == 'staticlibrary' " />
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetTriplet)" />
            <_Args Include="-fuse-ld=lld" Condition=" '$(UseLld)' == 'true' " />
            <_Args Include="-g" Condition=" '$(DebugSymbols)' == 'true' " />

            <_Args Include="-Xlinker /subsystem:$(Subsystem)" Condition=" '$(Subsystem)' != '' " />

            <_SystemRootDirectories Include="$(SystemRootDirectories)" />
            <_Args Include="@(_SystemRootDirectories->'--sysroot &quot;%(Identity)&quot;')" Condition=" '@(_SystemRootDirectories)' != '' " />

            <_IncludeSystemRootDirectories Include="$(IncludeSystemRootDirectories)" />
            <_Args Include="@(_IncludeSystemRootDirectories->'-isysroot &quot;%(Identity)&quot;')" Condition=" '@(_IncludeSystemRootDirectories)' != '' " />

            <_LibraryDirectories Include="@(LibraryDirectories)" />
            <_LibraryDirectories Include="$(LibraryDirectories)" />
            <_LibraryDirectories Include="@(ImportedLibraryDirectories)" />
            <_Args Include="@(_LibraryDirectories->'-L &quot;%(Identity)&quot;'->Replace('\', '\\'))" Condition=" '@(_LibraryDirectories)' != '' " />

            <_Dependencies Include="$(Dependencies)" />
            <_Dependencies Include="@(Dependencies)" />
            <_Dependencies Include="@(ImportedDependencies)" />
            <_Args Include="@(_Dependencies->'-l &quot;%(Identity)&quot;')" Condition=" '@(_Dependencies)' != '' " />

            <_AdditionalOptions Include="$(AdditionalOptions)" />
            <_Args Include="@(_AdditionalOptions)" />

            <_Args Include="@(Compile->'&quot;%(OutputPath)&quot;')" />

            <_Args Include="-o;&quot;$(IntermediateOutputPath)$(TargetFileName)&quot;" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
    </Target>

    <!--
    
    GetCopyToOutputDirectoryItemsDependsOn
    
    Collect any items that need to be copied to the output target directory (bin/lib).
    
    -->

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            $(GetCopyToOutputDirectoryItemsDependsOn);
            GetTransitiveTargetItems;
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetCopyToOutputDirectoryItems" DependsOnTargets="$(GetCopyToOutputDirectoryItemsDependsOn)" Returns="@(OutputItemsWithTargetPath)">
        <ItemGroup>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(TargetFileName)">
                <TargetPath>$(TargetPathName)$(TargetFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(LibraryFileName)" Condition="Exists('$(IntermediateOutputPath)$(LibraryFileName)')">
                <TargetPath>$(LibraryPathName)$(LibraryFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="$(IntermediateOutputPath)$(DebugSymbolsFileName)" Condition="Exists('$(IntermediateOutputPath)$(DebugSymbolsFileName)')">
                <TargetPath>$(TargetPathName)$(DebugSymbolsFileName)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="@(Header)" Condition=" '%(Header.CopyToIncludeDirectory)' == 'true' And '%(Header.IncludePath)' != '' ">
                <TargetPath>$(IncludePathName)%(Header.IncludePath)</TargetPath>
            </OutputItemsWithTargetPath>
            <OutputItemsWithTargetPath Include="@(GetTransitiveTargetItems)">
                <TargetPath>$(TargetPathName)%(Filename)%(Extension)</TargetPath>
            </OutputItemsWithTargetPath>
            <_DebugSymbolsPathOutputItems Include="@(GetTransitiveTargetItems->'%(DebugSymbolsPath)')" />
            <OutputItemsWithTargetPath Include="@(_DebugSymbolsPathOutputItems)" Condition=" '@(_DebugSymbolsPathOutputItems)' != '' ">
                <TargetPath>$(TargetPathName)%(Filename)%(Extension)</TargetPath>
            </OutputItemsWithTargetPath>
        </ItemGroup>
    </Target>

    <!--
    
    CopyFilesToOutputDirectory
    
    Copies any files that need to be copied to the output directories.
    
    -->

    <PropertyGroup>
        <CopyFilesToOutputDirectory Condition=" '$(CopyFilesToOutputDirectory)' == '' ">true</CopyFilesToOutputDirectory>
    </PropertyGroup>

    <PropertyGroup>
        <CopyFilesToOutputDirectoryDependsOn>
            $(CopyFilesToOutputDirectoryDependsOn);
            Compile;
            Link;
            BeforeCopyFilesToOutputDirectory;
            GetCopyToOutputDirectoryItems;
            AfterCopyFilesToOutputDirectory;
        </CopyFilesToOutputDirectoryDependsOn>
    </PropertyGroup>

    <Target Name="BeforeCopyFilesToOutputDirectory" />

    <Target Name="AfterCopyFilesToOutputDirectory" />

    <Target Name="CopyFilesToOutputDirectory" DependsOnTargets="$(CopyFilesToOutputDirectoryDependsOn)">
        <Message Text="OutputItemsWithTargetPath: @(OutputItemsWithTargetPath)" />
        <Copy
            SourceFiles="@(OutputItemsWithTargetPath)"
            DestinationFiles="$(OutputPath)%(TargetPath)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
            Condition=" '$(CopyFilesToOutputDirectory)' == 'true' And '$(SkipCopyTarget)' != 'true' ">
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>
    </Target>

    <PropertyGroup>
        <CoreBuildDependsOn>
            AssignProjectConfiguration;
            Compile;
            Link;
            CopyFilesToOutputDirectory;
        </CoreBuildDependsOn>
    </PropertyGroup>

    <Target Name="CoreBuild" DependsOnTargets="$(CoreBuildDependsOn)" />

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
        </CoreCleanDependsOn>
    </PropertyGroup>

    <Target Name="CoreClean" DependsOnTargets="$(CoreCleanDependsOn)" />

</Project>
